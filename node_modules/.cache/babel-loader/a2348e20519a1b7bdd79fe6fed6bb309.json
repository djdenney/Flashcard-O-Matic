{"ast":null,"code":"var _jsxFileName = \"/Users/danieldenney/Thinkful/Qualified/Project_Flashcards_Qualified_1/src/Card.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { listCards, readCard } from \"./utils/api/index.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Card({\n  deck\n}) {\n  _s();\n\n  const [cards, setCards] = useState([]);\n  const [currentIndex, setCurrentIndex] = useState(1);\n  const [currentFace, setCurrentFace] = useState(\"front\");\n  useEffect(() => {\n    async function fetchData() {\n      const abortController = new AbortController();\n      const response = await listCards(deck.id, abortController.signal);\n      setCards(response);\n      return () => {\n        abortController.abort();\n      };\n    }\n\n    fetchData();\n  }, []);\n\n  const flipCard = () => {\n    if (currentFace === \"front\") {\n      setCurrentFace(\"back\");\n    } else if (currentFace === \"back\") {\n      setCurrentFace(\"front\");\n    }\n  };\n\n  const nextCard = () => {\n    setCurrentIndex(currentIndex + 1);\n  };\n\n  const showFace = () => {\n    if (currentFace === \"front\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-text\",\n        children: cards[currentIndex].front\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this);\n    } else if (currentFace === \"back\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-text\",\n        children: cards[currentIndex].back\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-title\",\n        children: [\"Card \", currentIndex, \" of \", deck.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), showFace(), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: flipCard(),\n        className: \"btn btn-secondary\",\n        children: \"Flip\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: nextCard(),\n        className: \"btn btn-primary\",\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Card, \"IehwkHWllz1DPxyufeK5avR2Pb0=\");\n\n_c = Card;\nexport default Card;\n\nvar _c;\n\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"sources":["/Users/danieldenney/Thinkful/Qualified/Project_Flashcards_Qualified_1/src/Card.js"],"names":["React","useState","useEffect","listCards","readCard","Card","deck","cards","setCards","currentIndex","setCurrentIndex","currentFace","setCurrentFace","fetchData","abortController","AbortController","response","id","signal","abort","flipCard","nextCard","showFace","front","back","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAAQC,SAAR,EAAmBC,QAAnB,QAAkC,sBAAlC;;;AAEA,SAASC,IAAT,CAAc;AAACC,EAAAA;AAAD,CAAd,EAAsB;AAAA;;AAClB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACQ,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAAC,CAAD,CAAhD;AACA,QAAM,CAACU,WAAD,EAAcC,cAAd,IAAgCX,QAAQ,CAAC,OAAD,CAA9C;AAEAC,EAAAA,SAAS,CAAE,MAAM;AACb,mBAAeW,SAAf,GAA2B;AACvB,YAAMC,eAAe,GAAG,IAAIC,eAAJ,EAAxB;AACA,YAAMC,QAAQ,GAAG,MAAMb,SAAS,CAACG,IAAI,CAACW,EAAN,EAAUH,eAAe,CAACI,MAA1B,CAAhC;AACAV,MAAAA,QAAQ,CAACQ,QAAD,CAAR;AACA,aAAM,MAAM;AACRF,QAAAA,eAAe,CAACK,KAAhB;AACH,OAFD;AAGH;;AACDN,IAAAA,SAAS;AACZ,GAVQ,EAUN,EAVM,CAAT;;AAYA,QAAMO,QAAQ,GAAG,MAAM;AACnB,QAAGT,WAAW,KAAK,OAAnB,EAA4B;AACxBC,MAAAA,cAAc,CAAC,MAAD,CAAd;AACH,KAFD,MAEO,IAAID,WAAW,KAAI,MAAnB,EAA2B;AAC9BC,MAAAA,cAAc,CAAC,OAAD,CAAd;AACH;AACJ,GAND;;AAQA,QAAMS,QAAQ,GAAG,MAAM;AACnBX,IAAAA,eAAe,CAACD,YAAY,GAAC,CAAd,CAAf;AACH,GAFD;;AAIA,QAAMa,QAAQ,GAAG,MAAM;AACnB,QAAGX,WAAW,KAAK,OAAnB,EAA4B;AACxB,0BACI;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,kBACKJ,KAAK,CAACE,YAAD,CAAL,CAAoBc;AADzB;AAAA;AAAA;AAAA;AAAA,cADJ;AAKH,KAND,MAMO,IAAGZ,WAAW,KAAK,MAAnB,EAA2B;AAC9B,0BACI;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,kBACKJ,KAAK,CAACE,YAAD,CAAL,CAAoBe;AADzB;AAAA;AAAA;AAAA;AAAA,cADJ;AAKH;AACJ,GAdD;;AAgBA,sBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,4BACUf,YADV,UAC4BH,IAAI,CAACmB,MADjC;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAISH,QAAQ,EAJjB,eAKI;AAAQ,QAAA,OAAO,EAAEF,QAAQ,EAAzB;AAA6B,QAAA,SAAS,EAAC,mBAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ,eAQI;AAAQ,QAAA,OAAO,EAAEC,QAAQ,EAAzB;AAA6B,QAAA,SAAS,EAAC,iBAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBH;;GA7DQhB,I;;KAAAA,I;AA+DT,eAAeA,IAAf","sourcesContent":["import React, {useState, useEffect} from \"react\"\nimport {listCards, readCard} from \"./utils/api/index.js\"\n\nfunction Card({deck}) {\n    const [cards, setCards] = useState([])\n    const [currentIndex, setCurrentIndex] = useState(1)\n    const [currentFace, setCurrentFace] = useState(\"front\")\n\n    useEffect (() => {\n        async function fetchData() {\n            const abortController = new AbortController()\n            const response = await listCards(deck.id, abortController.signal)\n            setCards(response)\n            return() => {\n                abortController.abort()\n            }\n        }\n        fetchData()\n    }, [])\n\n    const flipCard = () => {\n        if(currentFace === \"front\") {\n            setCurrentFace(\"back\")\n        } else if (currentFace ===\"back\") {\n            setCurrentFace(\"front\")\n        }\n    }\n\n    const nextCard = () => {\n        setCurrentIndex(currentIndex+1)\n    }\n\n    const showFace = () => {\n        if(currentFace === \"front\") {\n            return (\n                <div className=\"card-text\">\n                    {cards[currentIndex].front}\n                </div>\n            )\n        } else if(currentFace === \"back\") {\n            return (\n                <div className=\"card-text\">\n                    {cards[currentIndex].back}\n                </div>\n            )\n        }\n    }\n\n    return(\n        <div className=\"card\">\n            <div className=\"card-body\">\n                <div className=\"card-title\">\n                    Card {currentIndex} of {deck.length}\n                </div>\n                    {showFace()}\n                <button onClick={flipCard()} className=\"btn btn-secondary\">\n                    Flip\n                </button>\n                <button onClick={nextCard()} className=\"btn btn-primary\">\n                    Next\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default Card"]},"metadata":{},"sourceType":"module"}