{"ast":null,"code":"var _jsxFileName = \"/Users/danieldenney/Thinkful/Qualified/Project_Flashcards_Qualified_1/src/Card.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { listCards, readCard } from \"./utils/api/index.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Card({\n  deck\n}) {\n  _s();\n\n  const [cards, setCards] = useState([]);\n  const [currentIndex, setCurrentIndex] = useState(1);\n  const [currentFace, setCurrentFace] = useState(\"front\");\n  let deckLength = 0;\n  useEffect(() => {\n    async function fetchData() {\n      const abortController = new AbortController();\n      const response = await listCards(deck.id, abortController.signal);\n      setCards(response);\n      return () => {\n        abortController.abort();\n      };\n    }\n\n    fetchData();\n  }, []);\n\n  async function flipCard() {\n    if (currentIndex === cards.length) {\n      if (window.confirm(`Restart cards?\n            \n                Click 'cancel' to return to the home page`)) {}\n    }\n\n    if (currentFace === \"front\") {\n      setCurrentFace(\"back\");\n    } else if (currentFace === \"back\") {\n      setCurrentFace(\"front\");\n    }\n  }\n\n  async function nextCard() {\n    if (currentIndex < cards.length) {\n      setCurrentIndex(currentIndex + 1);\n    }\n  }\n\n  function showFace() {\n    if (currentFace === \"front\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-text\",\n        children: cards[currentIndex].front\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this);\n    } else if (currentFace === \"back\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-title\",\n        children: `Card ${currentIndex} of ${deckLength}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), showFace, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: flipCard,\n        className: \"btn btn-secondary\",\n        children: \"Flip\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: nextCard,\n        className: \"btn btn-primary\",\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Card, \"IehwkHWllz1DPxyufeK5avR2Pb0=\");\n\n_c = Card;\nexport default Card;\n\nvar _c;\n\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"sources":["/Users/danieldenney/Thinkful/Qualified/Project_Flashcards_Qualified_1/src/Card.js"],"names":["React","useState","useEffect","listCards","readCard","Card","deck","cards","setCards","currentIndex","setCurrentIndex","currentFace","setCurrentFace","deckLength","fetchData","abortController","AbortController","response","id","signal","abort","flipCard","length","window","confirm","nextCard","showFace","front"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAAQC,SAAR,EAAmBC,QAAnB,QAAkC,sBAAlC;;;AAEA,SAASC,IAAT,CAAc;AAACC,EAAAA;AAAD,CAAd,EAAsB;AAAA;;AAClB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACQ,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAAC,CAAD,CAAhD;AACA,QAAM,CAACU,WAAD,EAAcC,cAAd,IAAgCX,QAAQ,CAAC,OAAD,CAA9C;AACA,MAAIY,UAAU,GAAG,CAAjB;AAEAX,EAAAA,SAAS,CAAE,MAAM;AACb,mBAAeY,SAAf,GAA2B;AACvB,YAAMC,eAAe,GAAG,IAAIC,eAAJ,EAAxB;AACA,YAAMC,QAAQ,GAAG,MAAMd,SAAS,CAACG,IAAI,CAACY,EAAN,EAAUH,eAAe,CAACI,MAA1B,CAAhC;AACAX,MAAAA,QAAQ,CAACS,QAAD,CAAR;AACA,aAAM,MAAM;AACRF,QAAAA,eAAe,CAACK,KAAhB;AACH,OAFD;AAGH;;AACDN,IAAAA,SAAS;AACZ,GAVQ,EAUN,EAVM,CAAT;;AAYA,iBAAeO,QAAf,GAA0B;AACtB,QAAGZ,YAAY,KAAKF,KAAK,CAACe,MAA1B,EAAkC;AAC9B,UAAGC,MAAM,CAACC,OAAP,CACE;AACjB;AACA,0DAHe,CAAH,EAIG,CAEF;AACJ;;AACD,QAAGb,WAAW,KAAK,OAAnB,EAA4B;AACxBC,MAAAA,cAAc,CAAC,MAAD,CAAd;AACH,KAFD,MAEO,IAAID,WAAW,KAAI,MAAnB,EAA2B;AAC9BC,MAAAA,cAAc,CAAC,OAAD,CAAd;AACH;AACJ;;AAED,iBAAea,QAAf,GAA0B;AACtB,QAAGhB,YAAY,GAAGF,KAAK,CAACe,MAAxB,EAAgC;AAC5BZ,MAAAA,eAAe,CAACD,YAAY,GAAC,CAAd,CAAf;AACH;AACJ;;AAED,WAASiB,QAAT,GAAoB;AAChB,QAAGf,WAAW,KAAK,OAAnB,EAA4B;AACxB,0BACI;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,kBACKJ,KAAK,CAACE,YAAD,CAAL,CAAoBkB;AADzB;AAAA;AAAA;AAAA;AAAA,cADJ;AAKH,KAND,MAMO,IAAGhB,WAAW,KAAK,MAAnB,EAA2B;AAC9B,0BACI;AAAK,QAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,cADJ;AAKH;AACJ;;AAED,sBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,kBACM,QAAOF,YAAa,OAAMI,UAAW;AAD3C;AAAA;AAAA;AAAA;AAAA,cADJ,EAISa,QAJT,eAKI;AAAQ,QAAA,OAAO,EAAEL,QAAjB;AAA2B,QAAA,SAAS,EAAC,mBAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ,eAQI;AAAQ,QAAA,OAAO,EAAEI,QAAjB;AAA2B,QAAA,SAAS,EAAC,iBAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBH;;GAzEQpB,I;;KAAAA,I;AA2ET,eAAeA,IAAf","sourcesContent":["import React, {useState, useEffect} from \"react\"\nimport {listCards, readCard} from \"./utils/api/index.js\"\n\nfunction Card({deck}) {\n    const [cards, setCards] = useState([])\n    const [currentIndex, setCurrentIndex] = useState(1)\n    const [currentFace, setCurrentFace] = useState(\"front\")\n    let deckLength = 0\n\n    useEffect (() => {\n        async function fetchData() {\n            const abortController = new AbortController()\n            const response = await listCards(deck.id, abortController.signal)\n            setCards(response)\n            return() => {\n                abortController.abort()\n            }\n        }\n        fetchData()\n    }, [])\n\n    async function flipCard() {\n        if(currentIndex === cards.length) {\n            if(window.confirm(\n                `Restart cards?\n            \n                Click 'cancel' to return to the home page`\n            )) {\n\n            }\n        }\n        if(currentFace === \"front\") {\n            setCurrentFace(\"back\")\n        } else if (currentFace ===\"back\") {\n            setCurrentFace(\"front\")\n        }\n    }\n\n    async function nextCard() {\n        if(currentIndex < cards.length) {\n            setCurrentIndex(currentIndex+1)\n        }\n    }\n\n    function showFace() {\n        if(currentFace === \"front\") {\n            return (\n                <div className=\"card-text\">\n                    {cards[currentIndex].front}\n                </div>\n            )\n        } else if(currentFace === \"back\") {\n            return (\n                <div className=\"card-text\">\n                    \n                </div>\n            )\n        }\n    }\n\n    return(\n        <div className=\"card\">\n            <div className=\"card-body\">\n                <div className=\"card-title\">\n                    {`Card ${currentIndex} of ${deckLength}`}\n                </div>\n                    {showFace}\n                <button onClick={flipCard} className=\"btn btn-secondary\">\n                    Flip\n                </button>\n                <button onClick={nextCard} className=\"btn btn-primary\">\n                    Next\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default Card"]},"metadata":{},"sourceType":"module"}